## Porcupine SDM using occurrence records from Oregon, Washington, and northern California
## Predictor import/manipulation on v-lab computer

## First, download 'vlap_shapefiles.zip' and 'shapefiles.zip' folders from Google Drive to a 
##        local folder which has been set as the working diretory:

setwd('C:/Users/cla236/Documents/cla236_temp')

library(rgdal) 
library(raster)


## 6/27/18: I used tools in ArcMap to project and resample/aggregate the rasters already:
##          Resample (for categorical, using 'majority')
##          Aggregate (for continuous, using either 'median' or 'min' -- see notes)
##    Ideally this would all be done in R, but I wanted cell sizes/alignment to be the same,
##    and I can set cell size, projection, and snap raster in the ArcMap processing environment


## 1. IMPORT RESAMPLED PREDICTOR RASTERS
      
      ppt <- raster('vlab_shapefiles/ppt_800m_clip')
      rivers_agg <- raster('vlab_shapefiles/aggregated/rivers_agg') #min
      cancovcon_agg <- raster('vlab_shapefiles/aggregated/cancovcon_agg') #median
      cancovhdw_agg <- raster('vlab_shapefiles/aggregated/cancovhdw_agg') #median
      tphge3_agg <- raster('vlab_shapefiles/aggregated/tphge3_agg') #median
      
      stack1 <- stack(ppt, rivers_agg, cancovcon_agg, cancovhdw_agg, tphge3_agg)
      
    ## for some reason the ones that were resampled don't have the same extent as the others 
      
      conplba_res <- raster('vlab_shapefiles/aggregated/conplba_res')      
      fortypba_res <- raster('vlab_shapefiles/aggregated/fortypba_res')
      hdwplba_res <- raster('vlab_shapefiles/aggregated/hdwplba_res')
      struccond_res <- raster('vlab_shapefiles/aggregated/struccond_res')
      vcmndbha_res <- raster('vlab_shapefiles/aggregated/vcmndbha_res')
      vegclass_res <- raster('vlab_shapefiles/aggregated/vegclass_res')

      stack2 <- stack(conplba_res, fortypba_res, hdwplba_res, struccond_res, vcmndbha_res,
                    vegclass_res)
      stack3 <- crop(stack2, ppt)
      stack4 <- stack(stack1, stack3)

    ## and the NLCD raster still won't stack
      
      nlcd2011_res <- raster('vlab_shapefiles/aggregated/nlcd2011_res')
        nlcd2011_res <- crop(nlcd2011_res, ppt)
      
      predictors <- stack(stack4, nlcd2011_res)
    
      nlayers(predictors)
      names(predictors)
      plot(predictors[[2]]) #for example
      res(predictors) ## 800m


## 2. LOAD PRESENCE POINTS
      
     ## occurrence records (OR/WA and northern CA):
      porc_occur_orwa <- readOGR(dsn = './shapefiles/observations', layer = 'orwa_occur_062218')
      porc_occur_nca <- readOGR(dsn = './shapefiles/observations', layer = 'nca_occur_013117')
        porc_occur_nca <- spTransform(porc_occur_nca, CRS('+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0'))
      
     ## wood block detections:
      porc_wb <- readOGR(dsn = './shapefiles/wood blocks', layer = 'all_wb_062518')  
      porc_wb <- spTransform(porc_wb, CRS('+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0'))
      
    ## combine:
      porcs <- bind(porc_occur_orwa, porc_occur_nca, porc_wb)
      

## 3. GENERATE BACKGROUND POINTS WITHIN STUDY AREA
      
      aoi <- readOGR(dsn = './shapefiles/admin', layer = 'OR_WA_NCA_dissolved')
      bg.pts <- spsample(aoi, n = 10000, type = 'random')
      
    ## COMBINE PRESENCE/BACKGROUND POINTS
      
      porc.pts <- as.data.frame(porcs)
      porc.pts$pres <- rep(1, nrow(porc.pts)) # 1 = presence
      porc.pts <- porc.pts[,c('pres', 'coords.x1', 'coords.x2')]
      colnames(porc.pts) <- c('pres', 'x', 'y')
      
      bg.pts <- as.data.frame(bg.pts)
      bg.pts$pres <- rep(0, nrow(bg.pts)) # 0 = background
      
      all.pts <- rbind(porc.pts, bg.pts)
        head(all.pts)
        table(all.pts$pres) # 10000 bg, 1612 pres
      
    ## convert back to SPDF
      sp.all.pts <- SpatialPointsDataFrame(data.frame(all.pts$x, all.pts$y), data = all.pts, 
                                           proj4string = porcs@proj4string)



## 4. EXTRACT RASTER VALUES

      names(predictors)      
        
      sp.all.pts$pred_ <- extract(predictors, sp.all.pts)  
      head(sp.all.pts@data)

  ## simplify dataframe (pres, predictor values)
  
      preds <- data.frame(sp.all.pts@data[,4])
      cur.data <- data.frame(sp.all.pts@data[1], preds)

      ## are these all the right class? (numeric, character, etc.)
      

## 5. THIN POINTS
